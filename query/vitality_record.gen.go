// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newVitalityRecord(db *gorm.DB, opts ...gen.DOOption) vitalityRecord {
	_vitalityRecord := vitalityRecord{}

	_vitalityRecord.vitalityRecordDo.UseDB(db, opts...)
	_vitalityRecord.vitalityRecordDo.UseModel(&model.VitalityRecord{})

	tableName := _vitalityRecord.vitalityRecordDo.TableName()
	_vitalityRecord.ALL = field.NewAsterisk(tableName)
	_vitalityRecord.Key = field.NewString(tableName, "key")
	_vitalityRecord.Sid = field.NewString(tableName, "sid")
	_vitalityRecord.Time = field.NewInt64(tableName, "time")
	_vitalityRecord.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_vitalityRecord.ZoneName = field.NewString(tableName, "zoneName")
	_vitalityRecord.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_vitalityRecord.IsUpload = field.NewInt64(tableName, "isUpload")
	_vitalityRecord.IsDeleted = field.NewInt64(tableName, "isDeleted")
	_vitalityRecord.Value = field.NewString(tableName, "value")

	_vitalityRecord.fillFieldMap()

	return _vitalityRecord
}

type vitalityRecord struct {
	vitalityRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64
	Value           field.String

	fieldMap map[string]field.Expr
}

func (v vitalityRecord) Table(newTableName string) *vitalityRecord {
	v.vitalityRecordDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vitalityRecord) As(alias string) *vitalityRecord {
	v.vitalityRecordDo.DO = *(v.vitalityRecordDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vitalityRecord) updateTableName(table string) *vitalityRecord {
	v.ALL = field.NewAsterisk(table)
	v.Key = field.NewString(table, "key")
	v.Sid = field.NewString(table, "sid")
	v.Time = field.NewInt64(table, "time")
	v.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	v.ZoneName = field.NewString(table, "zoneName")
	v.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	v.IsUpload = field.NewInt64(table, "isUpload")
	v.IsDeleted = field.NewInt64(table, "isDeleted")
	v.Value = field.NewString(table, "value")

	v.fillFieldMap()

	return v
}

func (v *vitalityRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vitalityRecord) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["key"] = v.Key
	v.fieldMap["sid"] = v.Sid
	v.fieldMap["time"] = v.Time
	v.fieldMap["zoneOffsetInSec"] = v.ZoneOffsetInSec
	v.fieldMap["zoneName"] = v.ZoneName
	v.fieldMap["timeIn0Tz"] = v.TimeIn0Tz
	v.fieldMap["isUpload"] = v.IsUpload
	v.fieldMap["isDeleted"] = v.IsDeleted
	v.fieldMap["value"] = v.Value
}

func (v vitalityRecord) clone(db *gorm.DB) vitalityRecord {
	v.vitalityRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vitalityRecord) replaceDB(db *gorm.DB) vitalityRecord {
	v.vitalityRecordDo.ReplaceDB(db)
	return v
}

type vitalityRecordDo struct{ gen.DO }

type IVitalityRecordDo interface {
	gen.SubQuery
	Debug() IVitalityRecordDo
	WithContext(ctx context.Context) IVitalityRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVitalityRecordDo
	WriteDB() IVitalityRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVitalityRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVitalityRecordDo
	Not(conds ...gen.Condition) IVitalityRecordDo
	Or(conds ...gen.Condition) IVitalityRecordDo
	Select(conds ...field.Expr) IVitalityRecordDo
	Where(conds ...gen.Condition) IVitalityRecordDo
	Order(conds ...field.Expr) IVitalityRecordDo
	Distinct(cols ...field.Expr) IVitalityRecordDo
	Omit(cols ...field.Expr) IVitalityRecordDo
	Join(table schema.Tabler, on ...field.Expr) IVitalityRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVitalityRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVitalityRecordDo
	Group(cols ...field.Expr) IVitalityRecordDo
	Having(conds ...gen.Condition) IVitalityRecordDo
	Limit(limit int) IVitalityRecordDo
	Offset(offset int) IVitalityRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVitalityRecordDo
	Unscoped() IVitalityRecordDo
	Create(values ...*model.VitalityRecord) error
	CreateInBatches(values []*model.VitalityRecord, batchSize int) error
	Save(values ...*model.VitalityRecord) error
	First() (*model.VitalityRecord, error)
	Take() (*model.VitalityRecord, error)
	Last() (*model.VitalityRecord, error)
	Find() ([]*model.VitalityRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VitalityRecord, err error)
	FindInBatches(result *[]*model.VitalityRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VitalityRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVitalityRecordDo
	Assign(attrs ...field.AssignExpr) IVitalityRecordDo
	Joins(fields ...field.RelationField) IVitalityRecordDo
	Preload(fields ...field.RelationField) IVitalityRecordDo
	FirstOrInit() (*model.VitalityRecord, error)
	FirstOrCreate() (*model.VitalityRecord, error)
	FindByPage(offset int, limit int) (result []*model.VitalityRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVitalityRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vitalityRecordDo) Debug() IVitalityRecordDo {
	return v.withDO(v.DO.Debug())
}

func (v vitalityRecordDo) WithContext(ctx context.Context) IVitalityRecordDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vitalityRecordDo) ReadDB() IVitalityRecordDo {
	return v.Clauses(dbresolver.Read)
}

func (v vitalityRecordDo) WriteDB() IVitalityRecordDo {
	return v.Clauses(dbresolver.Write)
}

func (v vitalityRecordDo) Session(config *gorm.Session) IVitalityRecordDo {
	return v.withDO(v.DO.Session(config))
}

func (v vitalityRecordDo) Clauses(conds ...clause.Expression) IVitalityRecordDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vitalityRecordDo) Returning(value interface{}, columns ...string) IVitalityRecordDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vitalityRecordDo) Not(conds ...gen.Condition) IVitalityRecordDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vitalityRecordDo) Or(conds ...gen.Condition) IVitalityRecordDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vitalityRecordDo) Select(conds ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vitalityRecordDo) Where(conds ...gen.Condition) IVitalityRecordDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vitalityRecordDo) Order(conds ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vitalityRecordDo) Distinct(cols ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vitalityRecordDo) Omit(cols ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vitalityRecordDo) Join(table schema.Tabler, on ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vitalityRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vitalityRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vitalityRecordDo) Group(cols ...field.Expr) IVitalityRecordDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vitalityRecordDo) Having(conds ...gen.Condition) IVitalityRecordDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vitalityRecordDo) Limit(limit int) IVitalityRecordDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vitalityRecordDo) Offset(offset int) IVitalityRecordDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vitalityRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVitalityRecordDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vitalityRecordDo) Unscoped() IVitalityRecordDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vitalityRecordDo) Create(values ...*model.VitalityRecord) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vitalityRecordDo) CreateInBatches(values []*model.VitalityRecord, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vitalityRecordDo) Save(values ...*model.VitalityRecord) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vitalityRecordDo) First() (*model.VitalityRecord, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VitalityRecord), nil
	}
}

func (v vitalityRecordDo) Take() (*model.VitalityRecord, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VitalityRecord), nil
	}
}

func (v vitalityRecordDo) Last() (*model.VitalityRecord, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VitalityRecord), nil
	}
}

func (v vitalityRecordDo) Find() ([]*model.VitalityRecord, error) {
	result, err := v.DO.Find()
	return result.([]*model.VitalityRecord), err
}

func (v vitalityRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VitalityRecord, err error) {
	buf := make([]*model.VitalityRecord, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vitalityRecordDo) FindInBatches(result *[]*model.VitalityRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vitalityRecordDo) Attrs(attrs ...field.AssignExpr) IVitalityRecordDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vitalityRecordDo) Assign(attrs ...field.AssignExpr) IVitalityRecordDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vitalityRecordDo) Joins(fields ...field.RelationField) IVitalityRecordDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vitalityRecordDo) Preload(fields ...field.RelationField) IVitalityRecordDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vitalityRecordDo) FirstOrInit() (*model.VitalityRecord, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VitalityRecord), nil
	}
}

func (v vitalityRecordDo) FirstOrCreate() (*model.VitalityRecord, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VitalityRecord), nil
	}
}

func (v vitalityRecordDo) FindByPage(offset int, limit int) (result []*model.VitalityRecord, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vitalityRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vitalityRecordDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vitalityRecordDo) Delete(models ...*model.VitalityRecord) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vitalityRecordDo) withDO(do gen.Dao) *vitalityRecordDo {
	v.DO = *do.(*gen.DO)
	return v
}
