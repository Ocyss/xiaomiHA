// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newSportSummary(db *gorm.DB, opts ...gen.DOOption) sportSummary {
	_sportSummary := sportSummary{}

	_sportSummary.sportSummaryDo.UseDB(db, opts...)
	_sportSummary.sportSummaryDo.UseModel(&model.SportSummary{})

	tableName := _sportSummary.sportSummaryDo.TableName()
	_sportSummary.ALL = field.NewAsterisk(tableName)
	_sportSummary.Category = field.NewString(tableName, "category")
	_sportSummary.Dimen = field.NewString(tableName, "dimen")
	_sportSummary.TimeIn0TZ = field.NewInt32(tableName, "timeIn0TZ")
	_sportSummary.ZoneOffsetSec = field.NewInt32(tableName, "zoneOffsetSec")
	_sportSummary.Summary = field.NewString(tableName, "summary")

	_sportSummary.fillFieldMap()

	return _sportSummary
}

type sportSummary struct {
	sportSummaryDo

	ALL           field.Asterisk
	Category      field.String
	Dimen         field.String
	TimeIn0TZ     field.Int32
	ZoneOffsetSec field.Int32
	Summary       field.String

	fieldMap map[string]field.Expr
}

func (s sportSummary) Table(newTableName string) *sportSummary {
	s.sportSummaryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sportSummary) As(alias string) *sportSummary {
	s.sportSummaryDo.DO = *(s.sportSummaryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sportSummary) updateTableName(table string) *sportSummary {
	s.ALL = field.NewAsterisk(table)
	s.Category = field.NewString(table, "category")
	s.Dimen = field.NewString(table, "dimen")
	s.TimeIn0TZ = field.NewInt32(table, "timeIn0TZ")
	s.ZoneOffsetSec = field.NewInt32(table, "zoneOffsetSec")
	s.Summary = field.NewString(table, "summary")

	s.fillFieldMap()

	return s
}

func (s *sportSummary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sportSummary) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["category"] = s.Category
	s.fieldMap["dimen"] = s.Dimen
	s.fieldMap["timeIn0TZ"] = s.TimeIn0TZ
	s.fieldMap["zoneOffsetSec"] = s.ZoneOffsetSec
	s.fieldMap["summary"] = s.Summary
}

func (s sportSummary) clone(db *gorm.DB) sportSummary {
	s.sportSummaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sportSummary) replaceDB(db *gorm.DB) sportSummary {
	s.sportSummaryDo.ReplaceDB(db)
	return s
}

type sportSummaryDo struct{ gen.DO }

type ISportSummaryDo interface {
	gen.SubQuery
	Debug() ISportSummaryDo
	WithContext(ctx context.Context) ISportSummaryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISportSummaryDo
	WriteDB() ISportSummaryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISportSummaryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISportSummaryDo
	Not(conds ...gen.Condition) ISportSummaryDo
	Or(conds ...gen.Condition) ISportSummaryDo
	Select(conds ...field.Expr) ISportSummaryDo
	Where(conds ...gen.Condition) ISportSummaryDo
	Order(conds ...field.Expr) ISportSummaryDo
	Distinct(cols ...field.Expr) ISportSummaryDo
	Omit(cols ...field.Expr) ISportSummaryDo
	Join(table schema.Tabler, on ...field.Expr) ISportSummaryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISportSummaryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISportSummaryDo
	Group(cols ...field.Expr) ISportSummaryDo
	Having(conds ...gen.Condition) ISportSummaryDo
	Limit(limit int) ISportSummaryDo
	Offset(offset int) ISportSummaryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISportSummaryDo
	Unscoped() ISportSummaryDo
	Create(values ...*model.SportSummary) error
	CreateInBatches(values []*model.SportSummary, batchSize int) error
	Save(values ...*model.SportSummary) error
	First() (*model.SportSummary, error)
	Take() (*model.SportSummary, error)
	Last() (*model.SportSummary, error)
	Find() ([]*model.SportSummary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SportSummary, err error)
	FindInBatches(result *[]*model.SportSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SportSummary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISportSummaryDo
	Assign(attrs ...field.AssignExpr) ISportSummaryDo
	Joins(fields ...field.RelationField) ISportSummaryDo
	Preload(fields ...field.RelationField) ISportSummaryDo
	FirstOrInit() (*model.SportSummary, error)
	FirstOrCreate() (*model.SportSummary, error)
	FindByPage(offset int, limit int) (result []*model.SportSummary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISportSummaryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sportSummaryDo) Debug() ISportSummaryDo {
	return s.withDO(s.DO.Debug())
}

func (s sportSummaryDo) WithContext(ctx context.Context) ISportSummaryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sportSummaryDo) ReadDB() ISportSummaryDo {
	return s.Clauses(dbresolver.Read)
}

func (s sportSummaryDo) WriteDB() ISportSummaryDo {
	return s.Clauses(dbresolver.Write)
}

func (s sportSummaryDo) Session(config *gorm.Session) ISportSummaryDo {
	return s.withDO(s.DO.Session(config))
}

func (s sportSummaryDo) Clauses(conds ...clause.Expression) ISportSummaryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sportSummaryDo) Returning(value interface{}, columns ...string) ISportSummaryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sportSummaryDo) Not(conds ...gen.Condition) ISportSummaryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sportSummaryDo) Or(conds ...gen.Condition) ISportSummaryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sportSummaryDo) Select(conds ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sportSummaryDo) Where(conds ...gen.Condition) ISportSummaryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sportSummaryDo) Order(conds ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sportSummaryDo) Distinct(cols ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sportSummaryDo) Omit(cols ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sportSummaryDo) Join(table schema.Tabler, on ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sportSummaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sportSummaryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sportSummaryDo) Group(cols ...field.Expr) ISportSummaryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sportSummaryDo) Having(conds ...gen.Condition) ISportSummaryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sportSummaryDo) Limit(limit int) ISportSummaryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sportSummaryDo) Offset(offset int) ISportSummaryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sportSummaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISportSummaryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sportSummaryDo) Unscoped() ISportSummaryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sportSummaryDo) Create(values ...*model.SportSummary) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sportSummaryDo) CreateInBatches(values []*model.SportSummary, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sportSummaryDo) Save(values ...*model.SportSummary) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sportSummaryDo) First() (*model.SportSummary, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportSummary), nil
	}
}

func (s sportSummaryDo) Take() (*model.SportSummary, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportSummary), nil
	}
}

func (s sportSummaryDo) Last() (*model.SportSummary, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportSummary), nil
	}
}

func (s sportSummaryDo) Find() ([]*model.SportSummary, error) {
	result, err := s.DO.Find()
	return result.([]*model.SportSummary), err
}

func (s sportSummaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SportSummary, err error) {
	buf := make([]*model.SportSummary, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sportSummaryDo) FindInBatches(result *[]*model.SportSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sportSummaryDo) Attrs(attrs ...field.AssignExpr) ISportSummaryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sportSummaryDo) Assign(attrs ...field.AssignExpr) ISportSummaryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sportSummaryDo) Joins(fields ...field.RelationField) ISportSummaryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sportSummaryDo) Preload(fields ...field.RelationField) ISportSummaryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sportSummaryDo) FirstOrInit() (*model.SportSummary, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportSummary), nil
	}
}

func (s sportSummaryDo) FirstOrCreate() (*model.SportSummary, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportSummary), nil
	}
}

func (s sportSummaryDo) FindByPage(offset int, limit int) (result []*model.SportSummary, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sportSummaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sportSummaryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sportSummaryDo) Delete(models ...*model.SportSummary) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sportSummaryDo) withDO(do gen.Dao) *sportSummaryDo {
	s.DO = *do.(*gen.DO)
	return s
}
