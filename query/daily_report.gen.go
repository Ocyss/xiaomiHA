// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newDailyReport(db *gorm.DB, opts ...gen.DOOption) dailyReport {
	_dailyReport := dailyReport{}

	_dailyReport.dailyReportDo.UseDB(db, opts...)
	_dailyReport.dailyReportDo.UseModel(&model.DailyReport{})

	tableName := _dailyReport.dailyReportDo.TableName()
	_dailyReport.ALL = field.NewAsterisk(tableName)
	_dailyReport.Sid = field.NewString(tableName, "sid")
	_dailyReport.DataType = field.NewString(tableName, "dataType")
	_dailyReport.UpdateTime = field.NewInt32(tableName, "updateTime")
	_dailyReport.TimeInZero = field.NewInt32(tableName, "timeInZero")
	_dailyReport.ViewTag = field.NewString(tableName, "viewTag")
	_dailyReport.Value = field.NewString(tableName, "value")
	_dailyReport.IsUpload = field.NewInt32(tableName, "isUpload")
	_dailyReport.IsDeleted = field.NewInt32(tableName, "isDeleted")

	_dailyReport.fillFieldMap()

	return _dailyReport
}

type dailyReport struct {
	dailyReportDo

	ALL        field.Asterisk
	Sid        field.String
	DataType   field.String
	UpdateTime field.Int32
	TimeInZero field.Int32
	ViewTag    field.String
	Value      field.String
	IsUpload   field.Int32
	IsDeleted  field.Int32

	fieldMap map[string]field.Expr
}

func (d dailyReport) Table(newTableName string) *dailyReport {
	d.dailyReportDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyReport) As(alias string) *dailyReport {
	d.dailyReportDo.DO = *(d.dailyReportDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyReport) updateTableName(table string) *dailyReport {
	d.ALL = field.NewAsterisk(table)
	d.Sid = field.NewString(table, "sid")
	d.DataType = field.NewString(table, "dataType")
	d.UpdateTime = field.NewInt32(table, "updateTime")
	d.TimeInZero = field.NewInt32(table, "timeInZero")
	d.ViewTag = field.NewString(table, "viewTag")
	d.Value = field.NewString(table, "value")
	d.IsUpload = field.NewInt32(table, "isUpload")
	d.IsDeleted = field.NewInt32(table, "isDeleted")

	d.fillFieldMap()

	return d
}

func (d *dailyReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyReport) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["sid"] = d.Sid
	d.fieldMap["dataType"] = d.DataType
	d.fieldMap["updateTime"] = d.UpdateTime
	d.fieldMap["timeInZero"] = d.TimeInZero
	d.fieldMap["viewTag"] = d.ViewTag
	d.fieldMap["value"] = d.Value
	d.fieldMap["isUpload"] = d.IsUpload
	d.fieldMap["isDeleted"] = d.IsDeleted
}

func (d dailyReport) clone(db *gorm.DB) dailyReport {
	d.dailyReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyReport) replaceDB(db *gorm.DB) dailyReport {
	d.dailyReportDo.ReplaceDB(db)
	return d
}

type dailyReportDo struct{ gen.DO }

type IDailyReportDo interface {
	gen.SubQuery
	Debug() IDailyReportDo
	WithContext(ctx context.Context) IDailyReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyReportDo
	WriteDB() IDailyReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyReportDo
	Not(conds ...gen.Condition) IDailyReportDo
	Or(conds ...gen.Condition) IDailyReportDo
	Select(conds ...field.Expr) IDailyReportDo
	Where(conds ...gen.Condition) IDailyReportDo
	Order(conds ...field.Expr) IDailyReportDo
	Distinct(cols ...field.Expr) IDailyReportDo
	Omit(cols ...field.Expr) IDailyReportDo
	Join(table schema.Tabler, on ...field.Expr) IDailyReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyReportDo
	Group(cols ...field.Expr) IDailyReportDo
	Having(conds ...gen.Condition) IDailyReportDo
	Limit(limit int) IDailyReportDo
	Offset(offset int) IDailyReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyReportDo
	Unscoped() IDailyReportDo
	Create(values ...*model.DailyReport) error
	CreateInBatches(values []*model.DailyReport, batchSize int) error
	Save(values ...*model.DailyReport) error
	First() (*model.DailyReport, error)
	Take() (*model.DailyReport, error)
	Last() (*model.DailyReport, error)
	Find() ([]*model.DailyReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyReport, err error)
	FindInBatches(result *[]*model.DailyReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyReportDo
	Assign(attrs ...field.AssignExpr) IDailyReportDo
	Joins(fields ...field.RelationField) IDailyReportDo
	Preload(fields ...field.RelationField) IDailyReportDo
	FirstOrInit() (*model.DailyReport, error)
	FirstOrCreate() (*model.DailyReport, error)
	FindByPage(offset int, limit int) (result []*model.DailyReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyReportDo) Debug() IDailyReportDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyReportDo) WithContext(ctx context.Context) IDailyReportDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyReportDo) ReadDB() IDailyReportDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyReportDo) WriteDB() IDailyReportDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyReportDo) Session(config *gorm.Session) IDailyReportDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyReportDo) Clauses(conds ...clause.Expression) IDailyReportDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyReportDo) Returning(value interface{}, columns ...string) IDailyReportDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyReportDo) Not(conds ...gen.Condition) IDailyReportDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyReportDo) Or(conds ...gen.Condition) IDailyReportDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyReportDo) Select(conds ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyReportDo) Where(conds ...gen.Condition) IDailyReportDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyReportDo) Order(conds ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyReportDo) Distinct(cols ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyReportDo) Omit(cols ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyReportDo) Join(table schema.Tabler, on ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyReportDo) Group(cols ...field.Expr) IDailyReportDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyReportDo) Having(conds ...gen.Condition) IDailyReportDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyReportDo) Limit(limit int) IDailyReportDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyReportDo) Offset(offset int) IDailyReportDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyReportDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyReportDo) Unscoped() IDailyReportDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyReportDo) Create(values ...*model.DailyReport) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyReportDo) CreateInBatches(values []*model.DailyReport, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyReportDo) Save(values ...*model.DailyReport) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyReportDo) First() (*model.DailyReport, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyReport), nil
	}
}

func (d dailyReportDo) Take() (*model.DailyReport, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyReport), nil
	}
}

func (d dailyReportDo) Last() (*model.DailyReport, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyReport), nil
	}
}

func (d dailyReportDo) Find() ([]*model.DailyReport, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyReport), err
}

func (d dailyReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyReport, err error) {
	buf := make([]*model.DailyReport, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyReportDo) FindInBatches(result *[]*model.DailyReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyReportDo) Attrs(attrs ...field.AssignExpr) IDailyReportDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyReportDo) Assign(attrs ...field.AssignExpr) IDailyReportDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyReportDo) Joins(fields ...field.RelationField) IDailyReportDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyReportDo) Preload(fields ...field.RelationField) IDailyReportDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyReportDo) FirstOrInit() (*model.DailyReport, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyReport), nil
	}
}

func (d dailyReportDo) FirstOrCreate() (*model.DailyReport, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyReport), nil
	}
}

func (d dailyReportDo) FindByPage(offset int, limit int) (result []*model.DailyReport, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyReportDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyReportDo) Delete(models ...*model.DailyReport) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyReportDo) withDO(do gen.Dao) *dailyReportDo {
	d.DO = *do.(*gen.DO)
	return d
}
