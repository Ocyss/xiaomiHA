// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newStepRecord(db *gorm.DB, opts ...gen.DOOption) stepRecord {
	_stepRecord := stepRecord{}

	_stepRecord.stepRecordDo.UseDB(db, opts...)
	_stepRecord.stepRecordDo.UseModel(&model.StepRecord{})

	tableName := _stepRecord.stepRecordDo.TableName()
	_stepRecord.ALL = field.NewAsterisk(tableName)
	_stepRecord.Key = field.NewString(tableName, "key")
	_stepRecord.Sid = field.NewString(tableName, "sid")
	_stepRecord.Time = field.NewInt64(tableName, "time")
	_stepRecord.Value = field.NewString(tableName, "value")
	_stepRecord.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_stepRecord.ZoneName = field.NewString(tableName, "zoneName")
	_stepRecord.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_stepRecord.IsUpload = field.NewInt64(tableName, "isUpload")
	_stepRecord.IsDeleted = field.NewInt64(tableName, "isDeleted")

	_stepRecord.fillFieldMap()

	return _stepRecord
}

type stepRecord struct {
	stepRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	Value           field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64

	fieldMap map[string]field.Expr
}

func (s stepRecord) Table(newTableName string) *stepRecord {
	s.stepRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stepRecord) As(alias string) *stepRecord {
	s.stepRecordDo.DO = *(s.stepRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stepRecord) updateTableName(table string) *stepRecord {
	s.ALL = field.NewAsterisk(table)
	s.Key = field.NewString(table, "key")
	s.Sid = field.NewString(table, "sid")
	s.Time = field.NewInt64(table, "time")
	s.Value = field.NewString(table, "value")
	s.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	s.ZoneName = field.NewString(table, "zoneName")
	s.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	s.IsUpload = field.NewInt64(table, "isUpload")
	s.IsDeleted = field.NewInt64(table, "isDeleted")

	s.fillFieldMap()

	return s
}

func (s *stepRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stepRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["key"] = s.Key
	s.fieldMap["sid"] = s.Sid
	s.fieldMap["time"] = s.Time
	s.fieldMap["value"] = s.Value
	s.fieldMap["zoneOffsetInSec"] = s.ZoneOffsetInSec
	s.fieldMap["zoneName"] = s.ZoneName
	s.fieldMap["timeIn0Tz"] = s.TimeIn0Tz
	s.fieldMap["isUpload"] = s.IsUpload
	s.fieldMap["isDeleted"] = s.IsDeleted
}

func (s stepRecord) clone(db *gorm.DB) stepRecord {
	s.stepRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stepRecord) replaceDB(db *gorm.DB) stepRecord {
	s.stepRecordDo.ReplaceDB(db)
	return s
}

type stepRecordDo struct{ gen.DO }

type IStepRecordDo interface {
	gen.SubQuery
	Debug() IStepRecordDo
	WithContext(ctx context.Context) IStepRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStepRecordDo
	WriteDB() IStepRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStepRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStepRecordDo
	Not(conds ...gen.Condition) IStepRecordDo
	Or(conds ...gen.Condition) IStepRecordDo
	Select(conds ...field.Expr) IStepRecordDo
	Where(conds ...gen.Condition) IStepRecordDo
	Order(conds ...field.Expr) IStepRecordDo
	Distinct(cols ...field.Expr) IStepRecordDo
	Omit(cols ...field.Expr) IStepRecordDo
	Join(table schema.Tabler, on ...field.Expr) IStepRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStepRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStepRecordDo
	Group(cols ...field.Expr) IStepRecordDo
	Having(conds ...gen.Condition) IStepRecordDo
	Limit(limit int) IStepRecordDo
	Offset(offset int) IStepRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStepRecordDo
	Unscoped() IStepRecordDo
	Create(values ...*model.StepRecord) error
	CreateInBatches(values []*model.StepRecord, batchSize int) error
	Save(values ...*model.StepRecord) error
	First() (*model.StepRecord, error)
	Take() (*model.StepRecord, error)
	Last() (*model.StepRecord, error)
	Find() ([]*model.StepRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StepRecord, err error)
	FindInBatches(result *[]*model.StepRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StepRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStepRecordDo
	Assign(attrs ...field.AssignExpr) IStepRecordDo
	Joins(fields ...field.RelationField) IStepRecordDo
	Preload(fields ...field.RelationField) IStepRecordDo
	FirstOrInit() (*model.StepRecord, error)
	FirstOrCreate() (*model.StepRecord, error)
	FindByPage(offset int, limit int) (result []*model.StepRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStepRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stepRecordDo) Debug() IStepRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s stepRecordDo) WithContext(ctx context.Context) IStepRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stepRecordDo) ReadDB() IStepRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s stepRecordDo) WriteDB() IStepRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s stepRecordDo) Session(config *gorm.Session) IStepRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s stepRecordDo) Clauses(conds ...clause.Expression) IStepRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stepRecordDo) Returning(value interface{}, columns ...string) IStepRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stepRecordDo) Not(conds ...gen.Condition) IStepRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stepRecordDo) Or(conds ...gen.Condition) IStepRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stepRecordDo) Select(conds ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stepRecordDo) Where(conds ...gen.Condition) IStepRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stepRecordDo) Order(conds ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stepRecordDo) Distinct(cols ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stepRecordDo) Omit(cols ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stepRecordDo) Join(table schema.Tabler, on ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stepRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stepRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stepRecordDo) Group(cols ...field.Expr) IStepRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stepRecordDo) Having(conds ...gen.Condition) IStepRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stepRecordDo) Limit(limit int) IStepRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stepRecordDo) Offset(offset int) IStepRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stepRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStepRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stepRecordDo) Unscoped() IStepRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stepRecordDo) Create(values ...*model.StepRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stepRecordDo) CreateInBatches(values []*model.StepRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stepRecordDo) Save(values ...*model.StepRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stepRecordDo) First() (*model.StepRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepRecord), nil
	}
}

func (s stepRecordDo) Take() (*model.StepRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepRecord), nil
	}
}

func (s stepRecordDo) Last() (*model.StepRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepRecord), nil
	}
}

func (s stepRecordDo) Find() ([]*model.StepRecord, error) {
	result, err := s.DO.Find()
	return result.([]*model.StepRecord), err
}

func (s stepRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StepRecord, err error) {
	buf := make([]*model.StepRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stepRecordDo) FindInBatches(result *[]*model.StepRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stepRecordDo) Attrs(attrs ...field.AssignExpr) IStepRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stepRecordDo) Assign(attrs ...field.AssignExpr) IStepRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stepRecordDo) Joins(fields ...field.RelationField) IStepRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stepRecordDo) Preload(fields ...field.RelationField) IStepRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stepRecordDo) FirstOrInit() (*model.StepRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepRecord), nil
	}
}

func (s stepRecordDo) FirstOrCreate() (*model.StepRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepRecord), nil
	}
}

func (s stepRecordDo) FindByPage(offset int, limit int) (result []*model.StepRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stepRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stepRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stepRecordDo) Delete(models ...*model.StepRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stepRecordDo) withDO(do gen.Dao) *stepRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
