// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newSpo2Record(db *gorm.DB, opts ...gen.DOOption) spo2Record {
	_spo2Record := spo2Record{}

	_spo2Record.spo2RecordDo.UseDB(db, opts...)
	_spo2Record.spo2RecordDo.UseModel(&model.Spo2Record{})

	tableName := _spo2Record.spo2RecordDo.TableName()
	_spo2Record.ALL = field.NewAsterisk(tableName)
	_spo2Record.Key = field.NewString(tableName, "key")
	_spo2Record.Sid = field.NewString(tableName, "sid")
	_spo2Record.Time = field.NewInt64(tableName, "time")
	_spo2Record.Value = field.NewString(tableName, "value")
	_spo2Record.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_spo2Record.ZoneName = field.NewString(tableName, "zoneName")
	_spo2Record.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_spo2Record.IsUpload = field.NewInt64(tableName, "isUpload")
	_spo2Record.IsDeleted = field.NewInt64(tableName, "isDeleted")

	_spo2Record.fillFieldMap()

	return _spo2Record
}

type spo2Record struct {
	spo2RecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	Value           field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64

	fieldMap map[string]field.Expr
}

func (s spo2Record) Table(newTableName string) *spo2Record {
	s.spo2RecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spo2Record) As(alias string) *spo2Record {
	s.spo2RecordDo.DO = *(s.spo2RecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spo2Record) updateTableName(table string) *spo2Record {
	s.ALL = field.NewAsterisk(table)
	s.Key = field.NewString(table, "key")
	s.Sid = field.NewString(table, "sid")
	s.Time = field.NewInt64(table, "time")
	s.Value = field.NewString(table, "value")
	s.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	s.ZoneName = field.NewString(table, "zoneName")
	s.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	s.IsUpload = field.NewInt64(table, "isUpload")
	s.IsDeleted = field.NewInt64(table, "isDeleted")

	s.fillFieldMap()

	return s
}

func (s *spo2Record) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spo2Record) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["key"] = s.Key
	s.fieldMap["sid"] = s.Sid
	s.fieldMap["time"] = s.Time
	s.fieldMap["value"] = s.Value
	s.fieldMap["zoneOffsetInSec"] = s.ZoneOffsetInSec
	s.fieldMap["zoneName"] = s.ZoneName
	s.fieldMap["timeIn0Tz"] = s.TimeIn0Tz
	s.fieldMap["isUpload"] = s.IsUpload
	s.fieldMap["isDeleted"] = s.IsDeleted
}

func (s spo2Record) clone(db *gorm.DB) spo2Record {
	s.spo2RecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spo2Record) replaceDB(db *gorm.DB) spo2Record {
	s.spo2RecordDo.ReplaceDB(db)
	return s
}

type spo2RecordDo struct{ gen.DO }

type ISpo2RecordDo interface {
	gen.SubQuery
	Debug() ISpo2RecordDo
	WithContext(ctx context.Context) ISpo2RecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpo2RecordDo
	WriteDB() ISpo2RecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpo2RecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpo2RecordDo
	Not(conds ...gen.Condition) ISpo2RecordDo
	Or(conds ...gen.Condition) ISpo2RecordDo
	Select(conds ...field.Expr) ISpo2RecordDo
	Where(conds ...gen.Condition) ISpo2RecordDo
	Order(conds ...field.Expr) ISpo2RecordDo
	Distinct(cols ...field.Expr) ISpo2RecordDo
	Omit(cols ...field.Expr) ISpo2RecordDo
	Join(table schema.Tabler, on ...field.Expr) ISpo2RecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpo2RecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpo2RecordDo
	Group(cols ...field.Expr) ISpo2RecordDo
	Having(conds ...gen.Condition) ISpo2RecordDo
	Limit(limit int) ISpo2RecordDo
	Offset(offset int) ISpo2RecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpo2RecordDo
	Unscoped() ISpo2RecordDo
	Create(values ...*model.Spo2Record) error
	CreateInBatches(values []*model.Spo2Record, batchSize int) error
	Save(values ...*model.Spo2Record) error
	First() (*model.Spo2Record, error)
	Take() (*model.Spo2Record, error)
	Last() (*model.Spo2Record, error)
	Find() ([]*model.Spo2Record, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spo2Record, err error)
	FindInBatches(result *[]*model.Spo2Record, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Spo2Record) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpo2RecordDo
	Assign(attrs ...field.AssignExpr) ISpo2RecordDo
	Joins(fields ...field.RelationField) ISpo2RecordDo
	Preload(fields ...field.RelationField) ISpo2RecordDo
	FirstOrInit() (*model.Spo2Record, error)
	FirstOrCreate() (*model.Spo2Record, error)
	FindByPage(offset int, limit int) (result []*model.Spo2Record, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpo2RecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spo2RecordDo) Debug() ISpo2RecordDo {
	return s.withDO(s.DO.Debug())
}

func (s spo2RecordDo) WithContext(ctx context.Context) ISpo2RecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spo2RecordDo) ReadDB() ISpo2RecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s spo2RecordDo) WriteDB() ISpo2RecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s spo2RecordDo) Session(config *gorm.Session) ISpo2RecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s spo2RecordDo) Clauses(conds ...clause.Expression) ISpo2RecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spo2RecordDo) Returning(value interface{}, columns ...string) ISpo2RecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spo2RecordDo) Not(conds ...gen.Condition) ISpo2RecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spo2RecordDo) Or(conds ...gen.Condition) ISpo2RecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spo2RecordDo) Select(conds ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spo2RecordDo) Where(conds ...gen.Condition) ISpo2RecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spo2RecordDo) Order(conds ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spo2RecordDo) Distinct(cols ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spo2RecordDo) Omit(cols ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spo2RecordDo) Join(table schema.Tabler, on ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spo2RecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spo2RecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spo2RecordDo) Group(cols ...field.Expr) ISpo2RecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spo2RecordDo) Having(conds ...gen.Condition) ISpo2RecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spo2RecordDo) Limit(limit int) ISpo2RecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spo2RecordDo) Offset(offset int) ISpo2RecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spo2RecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpo2RecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spo2RecordDo) Unscoped() ISpo2RecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spo2RecordDo) Create(values ...*model.Spo2Record) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spo2RecordDo) CreateInBatches(values []*model.Spo2Record, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spo2RecordDo) Save(values ...*model.Spo2Record) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spo2RecordDo) First() (*model.Spo2Record, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spo2Record), nil
	}
}

func (s spo2RecordDo) Take() (*model.Spo2Record, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spo2Record), nil
	}
}

func (s spo2RecordDo) Last() (*model.Spo2Record, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spo2Record), nil
	}
}

func (s spo2RecordDo) Find() ([]*model.Spo2Record, error) {
	result, err := s.DO.Find()
	return result.([]*model.Spo2Record), err
}

func (s spo2RecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spo2Record, err error) {
	buf := make([]*model.Spo2Record, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spo2RecordDo) FindInBatches(result *[]*model.Spo2Record, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spo2RecordDo) Attrs(attrs ...field.AssignExpr) ISpo2RecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spo2RecordDo) Assign(attrs ...field.AssignExpr) ISpo2RecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spo2RecordDo) Joins(fields ...field.RelationField) ISpo2RecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spo2RecordDo) Preload(fields ...field.RelationField) ISpo2RecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spo2RecordDo) FirstOrInit() (*model.Spo2Record, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spo2Record), nil
	}
}

func (s spo2RecordDo) FirstOrCreate() (*model.Spo2Record, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spo2Record), nil
	}
}

func (s spo2RecordDo) FindByPage(offset int, limit int) (result []*model.Spo2Record, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spo2RecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spo2RecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spo2RecordDo) Delete(models ...*model.Spo2Record) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spo2RecordDo) withDO(do gen.Dao) *spo2RecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
