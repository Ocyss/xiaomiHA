// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newCalorieRecord(db *gorm.DB, opts ...gen.DOOption) calorieRecord {
	_calorieRecord := calorieRecord{}

	_calorieRecord.calorieRecordDo.UseDB(db, opts...)
	_calorieRecord.calorieRecordDo.UseModel(&model.CalorieRecord{})

	tableName := _calorieRecord.calorieRecordDo.TableName()
	_calorieRecord.ALL = field.NewAsterisk(tableName)
	_calorieRecord.Key = field.NewString(tableName, "key")
	_calorieRecord.Sid = field.NewString(tableName, "sid")
	_calorieRecord.Time = field.NewInt64(tableName, "time")
	_calorieRecord.Value = field.NewString(tableName, "value")
	_calorieRecord.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_calorieRecord.ZoneName = field.NewString(tableName, "zoneName")
	_calorieRecord.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_calorieRecord.IsUpload = field.NewInt64(tableName, "isUpload")
	_calorieRecord.IsDeleted = field.NewInt64(tableName, "isDeleted")

	_calorieRecord.fillFieldMap()

	return _calorieRecord
}

type calorieRecord struct {
	calorieRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	Value           field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64

	fieldMap map[string]field.Expr
}

func (c calorieRecord) Table(newTableName string) *calorieRecord {
	c.calorieRecordDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calorieRecord) As(alias string) *calorieRecord {
	c.calorieRecordDo.DO = *(c.calorieRecordDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calorieRecord) updateTableName(table string) *calorieRecord {
	c.ALL = field.NewAsterisk(table)
	c.Key = field.NewString(table, "key")
	c.Sid = field.NewString(table, "sid")
	c.Time = field.NewInt64(table, "time")
	c.Value = field.NewString(table, "value")
	c.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	c.ZoneName = field.NewString(table, "zoneName")
	c.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	c.IsUpload = field.NewInt64(table, "isUpload")
	c.IsDeleted = field.NewInt64(table, "isDeleted")

	c.fillFieldMap()

	return c
}

func (c *calorieRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calorieRecord) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["key"] = c.Key
	c.fieldMap["sid"] = c.Sid
	c.fieldMap["time"] = c.Time
	c.fieldMap["value"] = c.Value
	c.fieldMap["zoneOffsetInSec"] = c.ZoneOffsetInSec
	c.fieldMap["zoneName"] = c.ZoneName
	c.fieldMap["timeIn0Tz"] = c.TimeIn0Tz
	c.fieldMap["isUpload"] = c.IsUpload
	c.fieldMap["isDeleted"] = c.IsDeleted
}

func (c calorieRecord) clone(db *gorm.DB) calorieRecord {
	c.calorieRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calorieRecord) replaceDB(db *gorm.DB) calorieRecord {
	c.calorieRecordDo.ReplaceDB(db)
	return c
}

type calorieRecordDo struct{ gen.DO }

type ICalorieRecordDo interface {
	gen.SubQuery
	Debug() ICalorieRecordDo
	WithContext(ctx context.Context) ICalorieRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalorieRecordDo
	WriteDB() ICalorieRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalorieRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalorieRecordDo
	Not(conds ...gen.Condition) ICalorieRecordDo
	Or(conds ...gen.Condition) ICalorieRecordDo
	Select(conds ...field.Expr) ICalorieRecordDo
	Where(conds ...gen.Condition) ICalorieRecordDo
	Order(conds ...field.Expr) ICalorieRecordDo
	Distinct(cols ...field.Expr) ICalorieRecordDo
	Omit(cols ...field.Expr) ICalorieRecordDo
	Join(table schema.Tabler, on ...field.Expr) ICalorieRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalorieRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalorieRecordDo
	Group(cols ...field.Expr) ICalorieRecordDo
	Having(conds ...gen.Condition) ICalorieRecordDo
	Limit(limit int) ICalorieRecordDo
	Offset(offset int) ICalorieRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalorieRecordDo
	Unscoped() ICalorieRecordDo
	Create(values ...*model.CalorieRecord) error
	CreateInBatches(values []*model.CalorieRecord, batchSize int) error
	Save(values ...*model.CalorieRecord) error
	First() (*model.CalorieRecord, error)
	Take() (*model.CalorieRecord, error)
	Last() (*model.CalorieRecord, error)
	Find() ([]*model.CalorieRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalorieRecord, err error)
	FindInBatches(result *[]*model.CalorieRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CalorieRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalorieRecordDo
	Assign(attrs ...field.AssignExpr) ICalorieRecordDo
	Joins(fields ...field.RelationField) ICalorieRecordDo
	Preload(fields ...field.RelationField) ICalorieRecordDo
	FirstOrInit() (*model.CalorieRecord, error)
	FirstOrCreate() (*model.CalorieRecord, error)
	FindByPage(offset int, limit int) (result []*model.CalorieRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalorieRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calorieRecordDo) Debug() ICalorieRecordDo {
	return c.withDO(c.DO.Debug())
}

func (c calorieRecordDo) WithContext(ctx context.Context) ICalorieRecordDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calorieRecordDo) ReadDB() ICalorieRecordDo {
	return c.Clauses(dbresolver.Read)
}

func (c calorieRecordDo) WriteDB() ICalorieRecordDo {
	return c.Clauses(dbresolver.Write)
}

func (c calorieRecordDo) Session(config *gorm.Session) ICalorieRecordDo {
	return c.withDO(c.DO.Session(config))
}

func (c calorieRecordDo) Clauses(conds ...clause.Expression) ICalorieRecordDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calorieRecordDo) Returning(value interface{}, columns ...string) ICalorieRecordDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calorieRecordDo) Not(conds ...gen.Condition) ICalorieRecordDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calorieRecordDo) Or(conds ...gen.Condition) ICalorieRecordDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calorieRecordDo) Select(conds ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calorieRecordDo) Where(conds ...gen.Condition) ICalorieRecordDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calorieRecordDo) Order(conds ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calorieRecordDo) Distinct(cols ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calorieRecordDo) Omit(cols ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calorieRecordDo) Join(table schema.Tabler, on ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calorieRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calorieRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calorieRecordDo) Group(cols ...field.Expr) ICalorieRecordDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calorieRecordDo) Having(conds ...gen.Condition) ICalorieRecordDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calorieRecordDo) Limit(limit int) ICalorieRecordDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calorieRecordDo) Offset(offset int) ICalorieRecordDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calorieRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalorieRecordDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calorieRecordDo) Unscoped() ICalorieRecordDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calorieRecordDo) Create(values ...*model.CalorieRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calorieRecordDo) CreateInBatches(values []*model.CalorieRecord, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calorieRecordDo) Save(values ...*model.CalorieRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calorieRecordDo) First() (*model.CalorieRecord, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalorieRecord), nil
	}
}

func (c calorieRecordDo) Take() (*model.CalorieRecord, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalorieRecord), nil
	}
}

func (c calorieRecordDo) Last() (*model.CalorieRecord, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalorieRecord), nil
	}
}

func (c calorieRecordDo) Find() ([]*model.CalorieRecord, error) {
	result, err := c.DO.Find()
	return result.([]*model.CalorieRecord), err
}

func (c calorieRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalorieRecord, err error) {
	buf := make([]*model.CalorieRecord, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calorieRecordDo) FindInBatches(result *[]*model.CalorieRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calorieRecordDo) Attrs(attrs ...field.AssignExpr) ICalorieRecordDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calorieRecordDo) Assign(attrs ...field.AssignExpr) ICalorieRecordDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calorieRecordDo) Joins(fields ...field.RelationField) ICalorieRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calorieRecordDo) Preload(fields ...field.RelationField) ICalorieRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calorieRecordDo) FirstOrInit() (*model.CalorieRecord, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalorieRecord), nil
	}
}

func (c calorieRecordDo) FirstOrCreate() (*model.CalorieRecord, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalorieRecord), nil
	}
}

func (c calorieRecordDo) FindByPage(offset int, limit int) (result []*model.CalorieRecord, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calorieRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calorieRecordDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calorieRecordDo) Delete(models ...*model.CalorieRecord) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calorieRecordDo) withDO(do gen.Dao) *calorieRecordDo {
	c.DO = *do.(*gen.DO)
	return c
}
