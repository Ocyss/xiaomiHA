// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newStressRecord(db *gorm.DB, opts ...gen.DOOption) stressRecord {
	_stressRecord := stressRecord{}

	_stressRecord.stressRecordDo.UseDB(db, opts...)
	_stressRecord.stressRecordDo.UseModel(&model.StressRecord{})

	tableName := _stressRecord.stressRecordDo.TableName()
	_stressRecord.ALL = field.NewAsterisk(tableName)
	_stressRecord.Key = field.NewString(tableName, "key")
	_stressRecord.Sid = field.NewString(tableName, "sid")
	_stressRecord.Time = field.NewInt64(tableName, "time")
	_stressRecord.Value = field.NewString(tableName, "value")
	_stressRecord.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_stressRecord.ZoneName = field.NewString(tableName, "zoneName")
	_stressRecord.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_stressRecord.IsUpload = field.NewInt64(tableName, "isUpload")
	_stressRecord.IsDeleted = field.NewInt64(tableName, "isDeleted")

	_stressRecord.fillFieldMap()

	return _stressRecord
}

type stressRecord struct {
	stressRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	Value           field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64

	fieldMap map[string]field.Expr
}

func (s stressRecord) Table(newTableName string) *stressRecord {
	s.stressRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stressRecord) As(alias string) *stressRecord {
	s.stressRecordDo.DO = *(s.stressRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stressRecord) updateTableName(table string) *stressRecord {
	s.ALL = field.NewAsterisk(table)
	s.Key = field.NewString(table, "key")
	s.Sid = field.NewString(table, "sid")
	s.Time = field.NewInt64(table, "time")
	s.Value = field.NewString(table, "value")
	s.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	s.ZoneName = field.NewString(table, "zoneName")
	s.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	s.IsUpload = field.NewInt64(table, "isUpload")
	s.IsDeleted = field.NewInt64(table, "isDeleted")

	s.fillFieldMap()

	return s
}

func (s *stressRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stressRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["key"] = s.Key
	s.fieldMap["sid"] = s.Sid
	s.fieldMap["time"] = s.Time
	s.fieldMap["value"] = s.Value
	s.fieldMap["zoneOffsetInSec"] = s.ZoneOffsetInSec
	s.fieldMap["zoneName"] = s.ZoneName
	s.fieldMap["timeIn0Tz"] = s.TimeIn0Tz
	s.fieldMap["isUpload"] = s.IsUpload
	s.fieldMap["isDeleted"] = s.IsDeleted
}

func (s stressRecord) clone(db *gorm.DB) stressRecord {
	s.stressRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stressRecord) replaceDB(db *gorm.DB) stressRecord {
	s.stressRecordDo.ReplaceDB(db)
	return s
}

type stressRecordDo struct{ gen.DO }

type IStressRecordDo interface {
	gen.SubQuery
	Debug() IStressRecordDo
	WithContext(ctx context.Context) IStressRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStressRecordDo
	WriteDB() IStressRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStressRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStressRecordDo
	Not(conds ...gen.Condition) IStressRecordDo
	Or(conds ...gen.Condition) IStressRecordDo
	Select(conds ...field.Expr) IStressRecordDo
	Where(conds ...gen.Condition) IStressRecordDo
	Order(conds ...field.Expr) IStressRecordDo
	Distinct(cols ...field.Expr) IStressRecordDo
	Omit(cols ...field.Expr) IStressRecordDo
	Join(table schema.Tabler, on ...field.Expr) IStressRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStressRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStressRecordDo
	Group(cols ...field.Expr) IStressRecordDo
	Having(conds ...gen.Condition) IStressRecordDo
	Limit(limit int) IStressRecordDo
	Offset(offset int) IStressRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStressRecordDo
	Unscoped() IStressRecordDo
	Create(values ...*model.StressRecord) error
	CreateInBatches(values []*model.StressRecord, batchSize int) error
	Save(values ...*model.StressRecord) error
	First() (*model.StressRecord, error)
	Take() (*model.StressRecord, error)
	Last() (*model.StressRecord, error)
	Find() ([]*model.StressRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StressRecord, err error)
	FindInBatches(result *[]*model.StressRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StressRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStressRecordDo
	Assign(attrs ...field.AssignExpr) IStressRecordDo
	Joins(fields ...field.RelationField) IStressRecordDo
	Preload(fields ...field.RelationField) IStressRecordDo
	FirstOrInit() (*model.StressRecord, error)
	FirstOrCreate() (*model.StressRecord, error)
	FindByPage(offset int, limit int) (result []*model.StressRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStressRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stressRecordDo) Debug() IStressRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s stressRecordDo) WithContext(ctx context.Context) IStressRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stressRecordDo) ReadDB() IStressRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s stressRecordDo) WriteDB() IStressRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s stressRecordDo) Session(config *gorm.Session) IStressRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s stressRecordDo) Clauses(conds ...clause.Expression) IStressRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stressRecordDo) Returning(value interface{}, columns ...string) IStressRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stressRecordDo) Not(conds ...gen.Condition) IStressRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stressRecordDo) Or(conds ...gen.Condition) IStressRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stressRecordDo) Select(conds ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stressRecordDo) Where(conds ...gen.Condition) IStressRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stressRecordDo) Order(conds ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stressRecordDo) Distinct(cols ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stressRecordDo) Omit(cols ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stressRecordDo) Join(table schema.Tabler, on ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stressRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stressRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stressRecordDo) Group(cols ...field.Expr) IStressRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stressRecordDo) Having(conds ...gen.Condition) IStressRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stressRecordDo) Limit(limit int) IStressRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stressRecordDo) Offset(offset int) IStressRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stressRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStressRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stressRecordDo) Unscoped() IStressRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stressRecordDo) Create(values ...*model.StressRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stressRecordDo) CreateInBatches(values []*model.StressRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stressRecordDo) Save(values ...*model.StressRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stressRecordDo) First() (*model.StressRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressRecord), nil
	}
}

func (s stressRecordDo) Take() (*model.StressRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressRecord), nil
	}
}

func (s stressRecordDo) Last() (*model.StressRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressRecord), nil
	}
}

func (s stressRecordDo) Find() ([]*model.StressRecord, error) {
	result, err := s.DO.Find()
	return result.([]*model.StressRecord), err
}

func (s stressRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StressRecord, err error) {
	buf := make([]*model.StressRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stressRecordDo) FindInBatches(result *[]*model.StressRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stressRecordDo) Attrs(attrs ...field.AssignExpr) IStressRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stressRecordDo) Assign(attrs ...field.AssignExpr) IStressRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stressRecordDo) Joins(fields ...field.RelationField) IStressRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stressRecordDo) Preload(fields ...field.RelationField) IStressRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stressRecordDo) FirstOrInit() (*model.StressRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressRecord), nil
	}
}

func (s stressRecordDo) FirstOrCreate() (*model.StressRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StressRecord), nil
	}
}

func (s stressRecordDo) FindByPage(offset int, limit int) (result []*model.StressRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stressRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stressRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stressRecordDo) Delete(models ...*model.StressRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stressRecordDo) withDO(do gen.Dao) *stressRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
