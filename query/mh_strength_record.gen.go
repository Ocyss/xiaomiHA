// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newMhStrengthRecord(db *gorm.DB, opts ...gen.DOOption) mhStrengthRecord {
	_mhStrengthRecord := mhStrengthRecord{}

	_mhStrengthRecord.mhStrengthRecordDo.UseDB(db, opts...)
	_mhStrengthRecord.mhStrengthRecordDo.UseModel(&model.MhStrengthRecord{})

	tableName := _mhStrengthRecord.mhStrengthRecordDo.TableName()
	_mhStrengthRecord.ALL = field.NewAsterisk(tableName)
	_mhStrengthRecord.Key = field.NewString(tableName, "key")
	_mhStrengthRecord.Sid = field.NewString(tableName, "sid")
	_mhStrengthRecord.Time = field.NewInt32(tableName, "time")
	_mhStrengthRecord.Value = field.NewString(tableName, "value")
	_mhStrengthRecord.ZoneOffsetInSec = field.NewInt32(tableName, "zoneOffsetInSec")
	_mhStrengthRecord.ZoneName = field.NewString(tableName, "zoneName")
	_mhStrengthRecord.TimeIn0Tz = field.NewInt32(tableName, "timeIn0Tz")
	_mhStrengthRecord.IsUpload = field.NewInt32(tableName, "isUpload")
	_mhStrengthRecord.IsDeleted = field.NewInt32(tableName, "isDeleted")

	_mhStrengthRecord.fillFieldMap()

	return _mhStrengthRecord
}

type mhStrengthRecord struct {
	mhStrengthRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int32
	Value           field.String
	ZoneOffsetInSec field.Int32
	ZoneName        field.String
	TimeIn0Tz       field.Int32
	IsUpload        field.Int32
	IsDeleted       field.Int32

	fieldMap map[string]field.Expr
}

func (m mhStrengthRecord) Table(newTableName string) *mhStrengthRecord {
	m.mhStrengthRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mhStrengthRecord) As(alias string) *mhStrengthRecord {
	m.mhStrengthRecordDo.DO = *(m.mhStrengthRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mhStrengthRecord) updateTableName(table string) *mhStrengthRecord {
	m.ALL = field.NewAsterisk(table)
	m.Key = field.NewString(table, "key")
	m.Sid = field.NewString(table, "sid")
	m.Time = field.NewInt32(table, "time")
	m.Value = field.NewString(table, "value")
	m.ZoneOffsetInSec = field.NewInt32(table, "zoneOffsetInSec")
	m.ZoneName = field.NewString(table, "zoneName")
	m.TimeIn0Tz = field.NewInt32(table, "timeIn0Tz")
	m.IsUpload = field.NewInt32(table, "isUpload")
	m.IsDeleted = field.NewInt32(table, "isDeleted")

	m.fillFieldMap()

	return m
}

func (m *mhStrengthRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mhStrengthRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["key"] = m.Key
	m.fieldMap["sid"] = m.Sid
	m.fieldMap["time"] = m.Time
	m.fieldMap["value"] = m.Value
	m.fieldMap["zoneOffsetInSec"] = m.ZoneOffsetInSec
	m.fieldMap["zoneName"] = m.ZoneName
	m.fieldMap["timeIn0Tz"] = m.TimeIn0Tz
	m.fieldMap["isUpload"] = m.IsUpload
	m.fieldMap["isDeleted"] = m.IsDeleted
}

func (m mhStrengthRecord) clone(db *gorm.DB) mhStrengthRecord {
	m.mhStrengthRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mhStrengthRecord) replaceDB(db *gorm.DB) mhStrengthRecord {
	m.mhStrengthRecordDo.ReplaceDB(db)
	return m
}

type mhStrengthRecordDo struct{ gen.DO }

type IMhStrengthRecordDo interface {
	gen.SubQuery
	Debug() IMhStrengthRecordDo
	WithContext(ctx context.Context) IMhStrengthRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMhStrengthRecordDo
	WriteDB() IMhStrengthRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMhStrengthRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMhStrengthRecordDo
	Not(conds ...gen.Condition) IMhStrengthRecordDo
	Or(conds ...gen.Condition) IMhStrengthRecordDo
	Select(conds ...field.Expr) IMhStrengthRecordDo
	Where(conds ...gen.Condition) IMhStrengthRecordDo
	Order(conds ...field.Expr) IMhStrengthRecordDo
	Distinct(cols ...field.Expr) IMhStrengthRecordDo
	Omit(cols ...field.Expr) IMhStrengthRecordDo
	Join(table schema.Tabler, on ...field.Expr) IMhStrengthRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMhStrengthRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMhStrengthRecordDo
	Group(cols ...field.Expr) IMhStrengthRecordDo
	Having(conds ...gen.Condition) IMhStrengthRecordDo
	Limit(limit int) IMhStrengthRecordDo
	Offset(offset int) IMhStrengthRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMhStrengthRecordDo
	Unscoped() IMhStrengthRecordDo
	Create(values ...*model.MhStrengthRecord) error
	CreateInBatches(values []*model.MhStrengthRecord, batchSize int) error
	Save(values ...*model.MhStrengthRecord) error
	First() (*model.MhStrengthRecord, error)
	Take() (*model.MhStrengthRecord, error)
	Last() (*model.MhStrengthRecord, error)
	Find() ([]*model.MhStrengthRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MhStrengthRecord, err error)
	FindInBatches(result *[]*model.MhStrengthRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MhStrengthRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMhStrengthRecordDo
	Assign(attrs ...field.AssignExpr) IMhStrengthRecordDo
	Joins(fields ...field.RelationField) IMhStrengthRecordDo
	Preload(fields ...field.RelationField) IMhStrengthRecordDo
	FirstOrInit() (*model.MhStrengthRecord, error)
	FirstOrCreate() (*model.MhStrengthRecord, error)
	FindByPage(offset int, limit int) (result []*model.MhStrengthRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMhStrengthRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mhStrengthRecordDo) Debug() IMhStrengthRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m mhStrengthRecordDo) WithContext(ctx context.Context) IMhStrengthRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mhStrengthRecordDo) ReadDB() IMhStrengthRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m mhStrengthRecordDo) WriteDB() IMhStrengthRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m mhStrengthRecordDo) Session(config *gorm.Session) IMhStrengthRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m mhStrengthRecordDo) Clauses(conds ...clause.Expression) IMhStrengthRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mhStrengthRecordDo) Returning(value interface{}, columns ...string) IMhStrengthRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mhStrengthRecordDo) Not(conds ...gen.Condition) IMhStrengthRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mhStrengthRecordDo) Or(conds ...gen.Condition) IMhStrengthRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mhStrengthRecordDo) Select(conds ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mhStrengthRecordDo) Where(conds ...gen.Condition) IMhStrengthRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mhStrengthRecordDo) Order(conds ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mhStrengthRecordDo) Distinct(cols ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mhStrengthRecordDo) Omit(cols ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mhStrengthRecordDo) Join(table schema.Tabler, on ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mhStrengthRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mhStrengthRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mhStrengthRecordDo) Group(cols ...field.Expr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mhStrengthRecordDo) Having(conds ...gen.Condition) IMhStrengthRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mhStrengthRecordDo) Limit(limit int) IMhStrengthRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mhStrengthRecordDo) Offset(offset int) IMhStrengthRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mhStrengthRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMhStrengthRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mhStrengthRecordDo) Unscoped() IMhStrengthRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mhStrengthRecordDo) Create(values ...*model.MhStrengthRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mhStrengthRecordDo) CreateInBatches(values []*model.MhStrengthRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mhStrengthRecordDo) Save(values ...*model.MhStrengthRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mhStrengthRecordDo) First() (*model.MhStrengthRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhStrengthRecord), nil
	}
}

func (m mhStrengthRecordDo) Take() (*model.MhStrengthRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhStrengthRecord), nil
	}
}

func (m mhStrengthRecordDo) Last() (*model.MhStrengthRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhStrengthRecord), nil
	}
}

func (m mhStrengthRecordDo) Find() ([]*model.MhStrengthRecord, error) {
	result, err := m.DO.Find()
	return result.([]*model.MhStrengthRecord), err
}

func (m mhStrengthRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MhStrengthRecord, err error) {
	buf := make([]*model.MhStrengthRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mhStrengthRecordDo) FindInBatches(result *[]*model.MhStrengthRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mhStrengthRecordDo) Attrs(attrs ...field.AssignExpr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mhStrengthRecordDo) Assign(attrs ...field.AssignExpr) IMhStrengthRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mhStrengthRecordDo) Joins(fields ...field.RelationField) IMhStrengthRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mhStrengthRecordDo) Preload(fields ...field.RelationField) IMhStrengthRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mhStrengthRecordDo) FirstOrInit() (*model.MhStrengthRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhStrengthRecord), nil
	}
}

func (m mhStrengthRecordDo) FirstOrCreate() (*model.MhStrengthRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MhStrengthRecord), nil
	}
}

func (m mhStrengthRecordDo) FindByPage(offset int, limit int) (result []*model.MhStrengthRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mhStrengthRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mhStrengthRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mhStrengthRecordDo) Delete(models ...*model.MhStrengthRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mhStrengthRecordDo) withDO(do gen.Dao) *mhStrengthRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
