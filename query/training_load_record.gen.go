// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newTrainingLoadRecord(db *gorm.DB, opts ...gen.DOOption) trainingLoadRecord {
	_trainingLoadRecord := trainingLoadRecord{}

	_trainingLoadRecord.trainingLoadRecordDo.UseDB(db, opts...)
	_trainingLoadRecord.trainingLoadRecordDo.UseModel(&model.TrainingLoadRecord{})

	tableName := _trainingLoadRecord.trainingLoadRecordDo.TableName()
	_trainingLoadRecord.ALL = field.NewAsterisk(tableName)
	_trainingLoadRecord.Key = field.NewString(tableName, "key")
	_trainingLoadRecord.Sid = field.NewString(tableName, "sid")
	_trainingLoadRecord.Time = field.NewInt64(tableName, "time")
	_trainingLoadRecord.Value = field.NewString(tableName, "value")
	_trainingLoadRecord.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_trainingLoadRecord.ZoneName = field.NewString(tableName, "zoneName")
	_trainingLoadRecord.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_trainingLoadRecord.IsUpload = field.NewInt64(tableName, "isUpload")
	_trainingLoadRecord.IsDeleted = field.NewInt64(tableName, "isDeleted")

	_trainingLoadRecord.fillFieldMap()

	return _trainingLoadRecord
}

type trainingLoadRecord struct {
	trainingLoadRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	Value           field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64

	fieldMap map[string]field.Expr
}

func (t trainingLoadRecord) Table(newTableName string) *trainingLoadRecord {
	t.trainingLoadRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trainingLoadRecord) As(alias string) *trainingLoadRecord {
	t.trainingLoadRecordDo.DO = *(t.trainingLoadRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trainingLoadRecord) updateTableName(table string) *trainingLoadRecord {
	t.ALL = field.NewAsterisk(table)
	t.Key = field.NewString(table, "key")
	t.Sid = field.NewString(table, "sid")
	t.Time = field.NewInt64(table, "time")
	t.Value = field.NewString(table, "value")
	t.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	t.ZoneName = field.NewString(table, "zoneName")
	t.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	t.IsUpload = field.NewInt64(table, "isUpload")
	t.IsDeleted = field.NewInt64(table, "isDeleted")

	t.fillFieldMap()

	return t
}

func (t *trainingLoadRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trainingLoadRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["key"] = t.Key
	t.fieldMap["sid"] = t.Sid
	t.fieldMap["time"] = t.Time
	t.fieldMap["value"] = t.Value
	t.fieldMap["zoneOffsetInSec"] = t.ZoneOffsetInSec
	t.fieldMap["zoneName"] = t.ZoneName
	t.fieldMap["timeIn0Tz"] = t.TimeIn0Tz
	t.fieldMap["isUpload"] = t.IsUpload
	t.fieldMap["isDeleted"] = t.IsDeleted
}

func (t trainingLoadRecord) clone(db *gorm.DB) trainingLoadRecord {
	t.trainingLoadRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trainingLoadRecord) replaceDB(db *gorm.DB) trainingLoadRecord {
	t.trainingLoadRecordDo.ReplaceDB(db)
	return t
}

type trainingLoadRecordDo struct{ gen.DO }

type ITrainingLoadRecordDo interface {
	gen.SubQuery
	Debug() ITrainingLoadRecordDo
	WithContext(ctx context.Context) ITrainingLoadRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrainingLoadRecordDo
	WriteDB() ITrainingLoadRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrainingLoadRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrainingLoadRecordDo
	Not(conds ...gen.Condition) ITrainingLoadRecordDo
	Or(conds ...gen.Condition) ITrainingLoadRecordDo
	Select(conds ...field.Expr) ITrainingLoadRecordDo
	Where(conds ...gen.Condition) ITrainingLoadRecordDo
	Order(conds ...field.Expr) ITrainingLoadRecordDo
	Distinct(cols ...field.Expr) ITrainingLoadRecordDo
	Omit(cols ...field.Expr) ITrainingLoadRecordDo
	Join(table schema.Tabler, on ...field.Expr) ITrainingLoadRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrainingLoadRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrainingLoadRecordDo
	Group(cols ...field.Expr) ITrainingLoadRecordDo
	Having(conds ...gen.Condition) ITrainingLoadRecordDo
	Limit(limit int) ITrainingLoadRecordDo
	Offset(offset int) ITrainingLoadRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainingLoadRecordDo
	Unscoped() ITrainingLoadRecordDo
	Create(values ...*model.TrainingLoadRecord) error
	CreateInBatches(values []*model.TrainingLoadRecord, batchSize int) error
	Save(values ...*model.TrainingLoadRecord) error
	First() (*model.TrainingLoadRecord, error)
	Take() (*model.TrainingLoadRecord, error)
	Last() (*model.TrainingLoadRecord, error)
	Find() ([]*model.TrainingLoadRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainingLoadRecord, err error)
	FindInBatches(result *[]*model.TrainingLoadRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TrainingLoadRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrainingLoadRecordDo
	Assign(attrs ...field.AssignExpr) ITrainingLoadRecordDo
	Joins(fields ...field.RelationField) ITrainingLoadRecordDo
	Preload(fields ...field.RelationField) ITrainingLoadRecordDo
	FirstOrInit() (*model.TrainingLoadRecord, error)
	FirstOrCreate() (*model.TrainingLoadRecord, error)
	FindByPage(offset int, limit int) (result []*model.TrainingLoadRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrainingLoadRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trainingLoadRecordDo) Debug() ITrainingLoadRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t trainingLoadRecordDo) WithContext(ctx context.Context) ITrainingLoadRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainingLoadRecordDo) ReadDB() ITrainingLoadRecordDo {
	return t.Clauses(dbresolver.Read)
}

func (t trainingLoadRecordDo) WriteDB() ITrainingLoadRecordDo {
	return t.Clauses(dbresolver.Write)
}

func (t trainingLoadRecordDo) Session(config *gorm.Session) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Session(config))
}

func (t trainingLoadRecordDo) Clauses(conds ...clause.Expression) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainingLoadRecordDo) Returning(value interface{}, columns ...string) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainingLoadRecordDo) Not(conds ...gen.Condition) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainingLoadRecordDo) Or(conds ...gen.Condition) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainingLoadRecordDo) Select(conds ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainingLoadRecordDo) Where(conds ...gen.Condition) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainingLoadRecordDo) Order(conds ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainingLoadRecordDo) Distinct(cols ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainingLoadRecordDo) Omit(cols ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainingLoadRecordDo) Join(table schema.Tabler, on ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainingLoadRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainingLoadRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainingLoadRecordDo) Group(cols ...field.Expr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainingLoadRecordDo) Having(conds ...gen.Condition) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainingLoadRecordDo) Limit(limit int) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainingLoadRecordDo) Offset(offset int) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainingLoadRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainingLoadRecordDo) Unscoped() ITrainingLoadRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainingLoadRecordDo) Create(values ...*model.TrainingLoadRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainingLoadRecordDo) CreateInBatches(values []*model.TrainingLoadRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainingLoadRecordDo) Save(values ...*model.TrainingLoadRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainingLoadRecordDo) First() (*model.TrainingLoadRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainingLoadRecord), nil
	}
}

func (t trainingLoadRecordDo) Take() (*model.TrainingLoadRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainingLoadRecord), nil
	}
}

func (t trainingLoadRecordDo) Last() (*model.TrainingLoadRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainingLoadRecord), nil
	}
}

func (t trainingLoadRecordDo) Find() ([]*model.TrainingLoadRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TrainingLoadRecord), err
}

func (t trainingLoadRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainingLoadRecord, err error) {
	buf := make([]*model.TrainingLoadRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainingLoadRecordDo) FindInBatches(result *[]*model.TrainingLoadRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainingLoadRecordDo) Attrs(attrs ...field.AssignExpr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainingLoadRecordDo) Assign(attrs ...field.AssignExpr) ITrainingLoadRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainingLoadRecordDo) Joins(fields ...field.RelationField) ITrainingLoadRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainingLoadRecordDo) Preload(fields ...field.RelationField) ITrainingLoadRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainingLoadRecordDo) FirstOrInit() (*model.TrainingLoadRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainingLoadRecord), nil
	}
}

func (t trainingLoadRecordDo) FirstOrCreate() (*model.TrainingLoadRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainingLoadRecord), nil
	}
}

func (t trainingLoadRecordDo) FindByPage(offset int, limit int) (result []*model.TrainingLoadRecord, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainingLoadRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainingLoadRecordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainingLoadRecordDo) Delete(models ...*model.TrainingLoadRecord) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainingLoadRecordDo) withDO(do gen.Dao) *trainingLoadRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
