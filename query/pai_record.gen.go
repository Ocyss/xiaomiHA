// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newPaiRecord(db *gorm.DB, opts ...gen.DOOption) paiRecord {
	_paiRecord := paiRecord{}

	_paiRecord.paiRecordDo.UseDB(db, opts...)
	_paiRecord.paiRecordDo.UseModel(&model.PaiRecord{})

	tableName := _paiRecord.paiRecordDo.TableName()
	_paiRecord.ALL = field.NewAsterisk(tableName)
	_paiRecord.Key = field.NewString(tableName, "key")
	_paiRecord.Sid = field.NewString(tableName, "sid")
	_paiRecord.Time = field.NewInt32(tableName, "time")
	_paiRecord.Value = field.NewString(tableName, "value")
	_paiRecord.ZoneOffsetInSec = field.NewInt32(tableName, "zoneOffsetInSec")
	_paiRecord.ZoneName = field.NewString(tableName, "zoneName")
	_paiRecord.TimeIn0Tz = field.NewInt32(tableName, "timeIn0Tz")
	_paiRecord.IsUpload = field.NewInt32(tableName, "isUpload")
	_paiRecord.IsDeleted = field.NewInt32(tableName, "isDeleted")

	_paiRecord.fillFieldMap()

	return _paiRecord
}

type paiRecord struct {
	paiRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int32
	Value           field.String
	ZoneOffsetInSec field.Int32
	ZoneName        field.String
	TimeIn0Tz       field.Int32
	IsUpload        field.Int32
	IsDeleted       field.Int32

	fieldMap map[string]field.Expr
}

func (p paiRecord) Table(newTableName string) *paiRecord {
	p.paiRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paiRecord) As(alias string) *paiRecord {
	p.paiRecordDo.DO = *(p.paiRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paiRecord) updateTableName(table string) *paiRecord {
	p.ALL = field.NewAsterisk(table)
	p.Key = field.NewString(table, "key")
	p.Sid = field.NewString(table, "sid")
	p.Time = field.NewInt32(table, "time")
	p.Value = field.NewString(table, "value")
	p.ZoneOffsetInSec = field.NewInt32(table, "zoneOffsetInSec")
	p.ZoneName = field.NewString(table, "zoneName")
	p.TimeIn0Tz = field.NewInt32(table, "timeIn0Tz")
	p.IsUpload = field.NewInt32(table, "isUpload")
	p.IsDeleted = field.NewInt32(table, "isDeleted")

	p.fillFieldMap()

	return p
}

func (p *paiRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paiRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["key"] = p.Key
	p.fieldMap["sid"] = p.Sid
	p.fieldMap["time"] = p.Time
	p.fieldMap["value"] = p.Value
	p.fieldMap["zoneOffsetInSec"] = p.ZoneOffsetInSec
	p.fieldMap["zoneName"] = p.ZoneName
	p.fieldMap["timeIn0Tz"] = p.TimeIn0Tz
	p.fieldMap["isUpload"] = p.IsUpload
	p.fieldMap["isDeleted"] = p.IsDeleted
}

func (p paiRecord) clone(db *gorm.DB) paiRecord {
	p.paiRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paiRecord) replaceDB(db *gorm.DB) paiRecord {
	p.paiRecordDo.ReplaceDB(db)
	return p
}

type paiRecordDo struct{ gen.DO }

type IPaiRecordDo interface {
	gen.SubQuery
	Debug() IPaiRecordDo
	WithContext(ctx context.Context) IPaiRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaiRecordDo
	WriteDB() IPaiRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaiRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaiRecordDo
	Not(conds ...gen.Condition) IPaiRecordDo
	Or(conds ...gen.Condition) IPaiRecordDo
	Select(conds ...field.Expr) IPaiRecordDo
	Where(conds ...gen.Condition) IPaiRecordDo
	Order(conds ...field.Expr) IPaiRecordDo
	Distinct(cols ...field.Expr) IPaiRecordDo
	Omit(cols ...field.Expr) IPaiRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPaiRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaiRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaiRecordDo
	Group(cols ...field.Expr) IPaiRecordDo
	Having(conds ...gen.Condition) IPaiRecordDo
	Limit(limit int) IPaiRecordDo
	Offset(offset int) IPaiRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaiRecordDo
	Unscoped() IPaiRecordDo
	Create(values ...*model.PaiRecord) error
	CreateInBatches(values []*model.PaiRecord, batchSize int) error
	Save(values ...*model.PaiRecord) error
	First() (*model.PaiRecord, error)
	Take() (*model.PaiRecord, error)
	Last() (*model.PaiRecord, error)
	Find() ([]*model.PaiRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaiRecord, err error)
	FindInBatches(result *[]*model.PaiRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PaiRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaiRecordDo
	Assign(attrs ...field.AssignExpr) IPaiRecordDo
	Joins(fields ...field.RelationField) IPaiRecordDo
	Preload(fields ...field.RelationField) IPaiRecordDo
	FirstOrInit() (*model.PaiRecord, error)
	FirstOrCreate() (*model.PaiRecord, error)
	FindByPage(offset int, limit int) (result []*model.PaiRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaiRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paiRecordDo) Debug() IPaiRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p paiRecordDo) WithContext(ctx context.Context) IPaiRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paiRecordDo) ReadDB() IPaiRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p paiRecordDo) WriteDB() IPaiRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p paiRecordDo) Session(config *gorm.Session) IPaiRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p paiRecordDo) Clauses(conds ...clause.Expression) IPaiRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paiRecordDo) Returning(value interface{}, columns ...string) IPaiRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paiRecordDo) Not(conds ...gen.Condition) IPaiRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paiRecordDo) Or(conds ...gen.Condition) IPaiRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paiRecordDo) Select(conds ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paiRecordDo) Where(conds ...gen.Condition) IPaiRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paiRecordDo) Order(conds ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paiRecordDo) Distinct(cols ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paiRecordDo) Omit(cols ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paiRecordDo) Join(table schema.Tabler, on ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paiRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paiRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paiRecordDo) Group(cols ...field.Expr) IPaiRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paiRecordDo) Having(conds ...gen.Condition) IPaiRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paiRecordDo) Limit(limit int) IPaiRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paiRecordDo) Offset(offset int) IPaiRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paiRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaiRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paiRecordDo) Unscoped() IPaiRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paiRecordDo) Create(values ...*model.PaiRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paiRecordDo) CreateInBatches(values []*model.PaiRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paiRecordDo) Save(values ...*model.PaiRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paiRecordDo) First() (*model.PaiRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaiRecord), nil
	}
}

func (p paiRecordDo) Take() (*model.PaiRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaiRecord), nil
	}
}

func (p paiRecordDo) Last() (*model.PaiRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaiRecord), nil
	}
}

func (p paiRecordDo) Find() ([]*model.PaiRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaiRecord), err
}

func (p paiRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaiRecord, err error) {
	buf := make([]*model.PaiRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paiRecordDo) FindInBatches(result *[]*model.PaiRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paiRecordDo) Attrs(attrs ...field.AssignExpr) IPaiRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paiRecordDo) Assign(attrs ...field.AssignExpr) IPaiRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paiRecordDo) Joins(fields ...field.RelationField) IPaiRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paiRecordDo) Preload(fields ...field.RelationField) IPaiRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paiRecordDo) FirstOrInit() (*model.PaiRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaiRecord), nil
	}
}

func (p paiRecordDo) FirstOrCreate() (*model.PaiRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaiRecord), nil
	}
}

func (p paiRecordDo) FindByPage(offset int, limit int) (result []*model.PaiRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paiRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paiRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paiRecordDo) Delete(models ...*model.PaiRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paiRecordDo) withDO(do gen.Dao) *paiRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
