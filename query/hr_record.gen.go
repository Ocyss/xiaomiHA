// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newHrRecord(db *gorm.DB, opts ...gen.DOOption) hrRecord {
	_hrRecord := hrRecord{}

	_hrRecord.hrRecordDo.UseDB(db, opts...)
	_hrRecord.hrRecordDo.UseModel(&model.HrRecord{})

	tableName := _hrRecord.hrRecordDo.TableName()
	_hrRecord.ALL = field.NewAsterisk(tableName)
	_hrRecord.Key = field.NewString(tableName, "key")
	_hrRecord.Sid = field.NewString(tableName, "sid")
	_hrRecord.Time = field.NewInt64(tableName, "time")
	_hrRecord.Value = field.NewString(tableName, "value")
	_hrRecord.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_hrRecord.ZoneName = field.NewString(tableName, "zoneName")
	_hrRecord.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_hrRecord.IsUpload = field.NewInt64(tableName, "isUpload")
	_hrRecord.IsDeleted = field.NewInt64(tableName, "isDeleted")

	_hrRecord.fillFieldMap()

	return _hrRecord
}

type hrRecord struct {
	hrRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int64
	Value           field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64

	fieldMap map[string]field.Expr
}

func (h hrRecord) Table(newTableName string) *hrRecord {
	h.hrRecordDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hrRecord) As(alias string) *hrRecord {
	h.hrRecordDo.DO = *(h.hrRecordDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hrRecord) updateTableName(table string) *hrRecord {
	h.ALL = field.NewAsterisk(table)
	h.Key = field.NewString(table, "key")
	h.Sid = field.NewString(table, "sid")
	h.Time = field.NewInt64(table, "time")
	h.Value = field.NewString(table, "value")
	h.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	h.ZoneName = field.NewString(table, "zoneName")
	h.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	h.IsUpload = field.NewInt64(table, "isUpload")
	h.IsDeleted = field.NewInt64(table, "isDeleted")

	h.fillFieldMap()

	return h
}

func (h *hrRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hrRecord) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 9)
	h.fieldMap["key"] = h.Key
	h.fieldMap["sid"] = h.Sid
	h.fieldMap["time"] = h.Time
	h.fieldMap["value"] = h.Value
	h.fieldMap["zoneOffsetInSec"] = h.ZoneOffsetInSec
	h.fieldMap["zoneName"] = h.ZoneName
	h.fieldMap["timeIn0Tz"] = h.TimeIn0Tz
	h.fieldMap["isUpload"] = h.IsUpload
	h.fieldMap["isDeleted"] = h.IsDeleted
}

func (h hrRecord) clone(db *gorm.DB) hrRecord {
	h.hrRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hrRecord) replaceDB(db *gorm.DB) hrRecord {
	h.hrRecordDo.ReplaceDB(db)
	return h
}

type hrRecordDo struct{ gen.DO }

type IHrRecordDo interface {
	gen.SubQuery
	Debug() IHrRecordDo
	WithContext(ctx context.Context) IHrRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHrRecordDo
	WriteDB() IHrRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHrRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHrRecordDo
	Not(conds ...gen.Condition) IHrRecordDo
	Or(conds ...gen.Condition) IHrRecordDo
	Select(conds ...field.Expr) IHrRecordDo
	Where(conds ...gen.Condition) IHrRecordDo
	Order(conds ...field.Expr) IHrRecordDo
	Distinct(cols ...field.Expr) IHrRecordDo
	Omit(cols ...field.Expr) IHrRecordDo
	Join(table schema.Tabler, on ...field.Expr) IHrRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHrRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHrRecordDo
	Group(cols ...field.Expr) IHrRecordDo
	Having(conds ...gen.Condition) IHrRecordDo
	Limit(limit int) IHrRecordDo
	Offset(offset int) IHrRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHrRecordDo
	Unscoped() IHrRecordDo
	Create(values ...*model.HrRecord) error
	CreateInBatches(values []*model.HrRecord, batchSize int) error
	Save(values ...*model.HrRecord) error
	First() (*model.HrRecord, error)
	Take() (*model.HrRecord, error)
	Last() (*model.HrRecord, error)
	Find() ([]*model.HrRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HrRecord, err error)
	FindInBatches(result *[]*model.HrRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HrRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHrRecordDo
	Assign(attrs ...field.AssignExpr) IHrRecordDo
	Joins(fields ...field.RelationField) IHrRecordDo
	Preload(fields ...field.RelationField) IHrRecordDo
	FirstOrInit() (*model.HrRecord, error)
	FirstOrCreate() (*model.HrRecord, error)
	FindByPage(offset int, limit int) (result []*model.HrRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHrRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hrRecordDo) Debug() IHrRecordDo {
	return h.withDO(h.DO.Debug())
}

func (h hrRecordDo) WithContext(ctx context.Context) IHrRecordDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hrRecordDo) ReadDB() IHrRecordDo {
	return h.Clauses(dbresolver.Read)
}

func (h hrRecordDo) WriteDB() IHrRecordDo {
	return h.Clauses(dbresolver.Write)
}

func (h hrRecordDo) Session(config *gorm.Session) IHrRecordDo {
	return h.withDO(h.DO.Session(config))
}

func (h hrRecordDo) Clauses(conds ...clause.Expression) IHrRecordDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hrRecordDo) Returning(value interface{}, columns ...string) IHrRecordDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hrRecordDo) Not(conds ...gen.Condition) IHrRecordDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hrRecordDo) Or(conds ...gen.Condition) IHrRecordDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hrRecordDo) Select(conds ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hrRecordDo) Where(conds ...gen.Condition) IHrRecordDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hrRecordDo) Order(conds ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hrRecordDo) Distinct(cols ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hrRecordDo) Omit(cols ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hrRecordDo) Join(table schema.Tabler, on ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hrRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hrRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hrRecordDo) Group(cols ...field.Expr) IHrRecordDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hrRecordDo) Having(conds ...gen.Condition) IHrRecordDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hrRecordDo) Limit(limit int) IHrRecordDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hrRecordDo) Offset(offset int) IHrRecordDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hrRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHrRecordDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hrRecordDo) Unscoped() IHrRecordDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hrRecordDo) Create(values ...*model.HrRecord) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hrRecordDo) CreateInBatches(values []*model.HrRecord, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hrRecordDo) Save(values ...*model.HrRecord) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hrRecordDo) First() (*model.HrRecord, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HrRecord), nil
	}
}

func (h hrRecordDo) Take() (*model.HrRecord, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HrRecord), nil
	}
}

func (h hrRecordDo) Last() (*model.HrRecord, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HrRecord), nil
	}
}

func (h hrRecordDo) Find() ([]*model.HrRecord, error) {
	result, err := h.DO.Find()
	return result.([]*model.HrRecord), err
}

func (h hrRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HrRecord, err error) {
	buf := make([]*model.HrRecord, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hrRecordDo) FindInBatches(result *[]*model.HrRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hrRecordDo) Attrs(attrs ...field.AssignExpr) IHrRecordDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hrRecordDo) Assign(attrs ...field.AssignExpr) IHrRecordDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hrRecordDo) Joins(fields ...field.RelationField) IHrRecordDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hrRecordDo) Preload(fields ...field.RelationField) IHrRecordDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hrRecordDo) FirstOrInit() (*model.HrRecord, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HrRecord), nil
	}
}

func (h hrRecordDo) FirstOrCreate() (*model.HrRecord, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HrRecord), nil
	}
}

func (h hrRecordDo) FindByPage(offset int, limit int) (result []*model.HrRecord, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hrRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hrRecordDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hrRecordDo) Delete(models ...*model.HrRecord) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hrRecordDo) withDO(do gen.Dao) *hrRecordDo {
	h.DO = *do.(*gen.DO)
	return h
}
