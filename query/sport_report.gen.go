// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newSportReport(db *gorm.DB, opts ...gen.DOOption) sportReport {
	_sportReport := sportReport{}

	_sportReport.sportReportDo.UseDB(db, opts...)
	_sportReport.sportReportDo.UseModel(&model.SportReport{})

	tableName := _sportReport.sportReportDo.TableName()
	_sportReport.ALL = field.NewAsterisk(tableName)
	_sportReport.Sid = field.NewString(tableName, "sid")
	_sportReport.Key = field.NewString(tableName, "key")
	_sportReport.Time = field.NewInt64(tableName, "time")
	_sportReport.Category = field.NewString(tableName, "category")
	_sportReport.ZoneOffsetInSec = field.NewInt64(tableName, "zoneOffsetInSec")
	_sportReport.ZoneName = field.NewString(tableName, "zoneName")
	_sportReport.Value = field.NewString(tableName, "value")
	_sportReport.TimeIn0Tz = field.NewInt64(tableName, "timeIn0Tz")
	_sportReport.IsUpload = field.NewInt64(tableName, "isUpload")
	_sportReport.IsDeleted = field.NewInt64(tableName, "isDeleted")
	_sportReport.OfflineCounted = field.NewInt64(tableName, "offlineCounted")

	_sportReport.fillFieldMap()

	return _sportReport
}

type sportReport struct {
	sportReportDo

	ALL             field.Asterisk
	Sid             field.String
	Key             field.String
	Time            field.Int64
	Category        field.String
	ZoneOffsetInSec field.Int64
	ZoneName        field.String
	Value           field.String
	TimeIn0Tz       field.Int64
	IsUpload        field.Int64
	IsDeleted       field.Int64
	OfflineCounted  field.Int64

	fieldMap map[string]field.Expr
}

func (s sportReport) Table(newTableName string) *sportReport {
	s.sportReportDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sportReport) As(alias string) *sportReport {
	s.sportReportDo.DO = *(s.sportReportDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sportReport) updateTableName(table string) *sportReport {
	s.ALL = field.NewAsterisk(table)
	s.Sid = field.NewString(table, "sid")
	s.Key = field.NewString(table, "key")
	s.Time = field.NewInt64(table, "time")
	s.Category = field.NewString(table, "category")
	s.ZoneOffsetInSec = field.NewInt64(table, "zoneOffsetInSec")
	s.ZoneName = field.NewString(table, "zoneName")
	s.Value = field.NewString(table, "value")
	s.TimeIn0Tz = field.NewInt64(table, "timeIn0Tz")
	s.IsUpload = field.NewInt64(table, "isUpload")
	s.IsDeleted = field.NewInt64(table, "isDeleted")
	s.OfflineCounted = field.NewInt64(table, "offlineCounted")

	s.fillFieldMap()

	return s
}

func (s *sportReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sportReport) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["sid"] = s.Sid
	s.fieldMap["key"] = s.Key
	s.fieldMap["time"] = s.Time
	s.fieldMap["category"] = s.Category
	s.fieldMap["zoneOffsetInSec"] = s.ZoneOffsetInSec
	s.fieldMap["zoneName"] = s.ZoneName
	s.fieldMap["value"] = s.Value
	s.fieldMap["timeIn0Tz"] = s.TimeIn0Tz
	s.fieldMap["isUpload"] = s.IsUpload
	s.fieldMap["isDeleted"] = s.IsDeleted
	s.fieldMap["offlineCounted"] = s.OfflineCounted
}

func (s sportReport) clone(db *gorm.DB) sportReport {
	s.sportReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sportReport) replaceDB(db *gorm.DB) sportReport {
	s.sportReportDo.ReplaceDB(db)
	return s
}

type sportReportDo struct{ gen.DO }

type ISportReportDo interface {
	gen.SubQuery
	Debug() ISportReportDo
	WithContext(ctx context.Context) ISportReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISportReportDo
	WriteDB() ISportReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISportReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISportReportDo
	Not(conds ...gen.Condition) ISportReportDo
	Or(conds ...gen.Condition) ISportReportDo
	Select(conds ...field.Expr) ISportReportDo
	Where(conds ...gen.Condition) ISportReportDo
	Order(conds ...field.Expr) ISportReportDo
	Distinct(cols ...field.Expr) ISportReportDo
	Omit(cols ...field.Expr) ISportReportDo
	Join(table schema.Tabler, on ...field.Expr) ISportReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISportReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISportReportDo
	Group(cols ...field.Expr) ISportReportDo
	Having(conds ...gen.Condition) ISportReportDo
	Limit(limit int) ISportReportDo
	Offset(offset int) ISportReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISportReportDo
	Unscoped() ISportReportDo
	Create(values ...*model.SportReport) error
	CreateInBatches(values []*model.SportReport, batchSize int) error
	Save(values ...*model.SportReport) error
	First() (*model.SportReport, error)
	Take() (*model.SportReport, error)
	Last() (*model.SportReport, error)
	Find() ([]*model.SportReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SportReport, err error)
	FindInBatches(result *[]*model.SportReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SportReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISportReportDo
	Assign(attrs ...field.AssignExpr) ISportReportDo
	Joins(fields ...field.RelationField) ISportReportDo
	Preload(fields ...field.RelationField) ISportReportDo
	FirstOrInit() (*model.SportReport, error)
	FirstOrCreate() (*model.SportReport, error)
	FindByPage(offset int, limit int) (result []*model.SportReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISportReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sportReportDo) Debug() ISportReportDo {
	return s.withDO(s.DO.Debug())
}

func (s sportReportDo) WithContext(ctx context.Context) ISportReportDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sportReportDo) ReadDB() ISportReportDo {
	return s.Clauses(dbresolver.Read)
}

func (s sportReportDo) WriteDB() ISportReportDo {
	return s.Clauses(dbresolver.Write)
}

func (s sportReportDo) Session(config *gorm.Session) ISportReportDo {
	return s.withDO(s.DO.Session(config))
}

func (s sportReportDo) Clauses(conds ...clause.Expression) ISportReportDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sportReportDo) Returning(value interface{}, columns ...string) ISportReportDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sportReportDo) Not(conds ...gen.Condition) ISportReportDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sportReportDo) Or(conds ...gen.Condition) ISportReportDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sportReportDo) Select(conds ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sportReportDo) Where(conds ...gen.Condition) ISportReportDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sportReportDo) Order(conds ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sportReportDo) Distinct(cols ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sportReportDo) Omit(cols ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sportReportDo) Join(table schema.Tabler, on ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sportReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sportReportDo) RightJoin(table schema.Tabler, on ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sportReportDo) Group(cols ...field.Expr) ISportReportDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sportReportDo) Having(conds ...gen.Condition) ISportReportDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sportReportDo) Limit(limit int) ISportReportDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sportReportDo) Offset(offset int) ISportReportDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sportReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISportReportDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sportReportDo) Unscoped() ISportReportDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sportReportDo) Create(values ...*model.SportReport) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sportReportDo) CreateInBatches(values []*model.SportReport, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sportReportDo) Save(values ...*model.SportReport) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sportReportDo) First() (*model.SportReport, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportReport), nil
	}
}

func (s sportReportDo) Take() (*model.SportReport, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportReport), nil
	}
}

func (s sportReportDo) Last() (*model.SportReport, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportReport), nil
	}
}

func (s sportReportDo) Find() ([]*model.SportReport, error) {
	result, err := s.DO.Find()
	return result.([]*model.SportReport), err
}

func (s sportReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SportReport, err error) {
	buf := make([]*model.SportReport, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sportReportDo) FindInBatches(result *[]*model.SportReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sportReportDo) Attrs(attrs ...field.AssignExpr) ISportReportDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sportReportDo) Assign(attrs ...field.AssignExpr) ISportReportDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sportReportDo) Joins(fields ...field.RelationField) ISportReportDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sportReportDo) Preload(fields ...field.RelationField) ISportReportDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sportReportDo) FirstOrInit() (*model.SportReport, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportReport), nil
	}
}

func (s sportReportDo) FirstOrCreate() (*model.SportReport, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SportReport), nil
	}
}

func (s sportReportDo) FindByPage(offset int, limit int) (result []*model.SportReport, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sportReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sportReportDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sportReportDo) Delete(models ...*model.SportReport) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sportReportDo) withDO(do gen.Dao) *sportReportDo {
	s.DO = *do.(*gen.DO)
	return s
}
