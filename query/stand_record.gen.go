// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Ocyss/xiaomiHA/model"
)

func newStandRecord(db *gorm.DB, opts ...gen.DOOption) standRecord {
	_standRecord := standRecord{}

	_standRecord.standRecordDo.UseDB(db, opts...)
	_standRecord.standRecordDo.UseModel(&model.StandRecord{})

	tableName := _standRecord.standRecordDo.TableName()
	_standRecord.ALL = field.NewAsterisk(tableName)
	_standRecord.Key = field.NewString(tableName, "key")
	_standRecord.Sid = field.NewString(tableName, "sid")
	_standRecord.Time = field.NewInt32(tableName, "time")
	_standRecord.Value = field.NewString(tableName, "value")
	_standRecord.ZoneOffsetInSec = field.NewInt32(tableName, "zoneOffsetInSec")
	_standRecord.ZoneName = field.NewString(tableName, "zoneName")
	_standRecord.TimeIn0Tz = field.NewInt32(tableName, "timeIn0Tz")
	_standRecord.IsUpload = field.NewInt32(tableName, "isUpload")
	_standRecord.IsDeleted = field.NewInt32(tableName, "isDeleted")

	_standRecord.fillFieldMap()

	return _standRecord
}

type standRecord struct {
	standRecordDo

	ALL             field.Asterisk
	Key             field.String
	Sid             field.String
	Time            field.Int32
	Value           field.String
	ZoneOffsetInSec field.Int32
	ZoneName        field.String
	TimeIn0Tz       field.Int32
	IsUpload        field.Int32
	IsDeleted       field.Int32

	fieldMap map[string]field.Expr
}

func (s standRecord) Table(newTableName string) *standRecord {
	s.standRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s standRecord) As(alias string) *standRecord {
	s.standRecordDo.DO = *(s.standRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *standRecord) updateTableName(table string) *standRecord {
	s.ALL = field.NewAsterisk(table)
	s.Key = field.NewString(table, "key")
	s.Sid = field.NewString(table, "sid")
	s.Time = field.NewInt32(table, "time")
	s.Value = field.NewString(table, "value")
	s.ZoneOffsetInSec = field.NewInt32(table, "zoneOffsetInSec")
	s.ZoneName = field.NewString(table, "zoneName")
	s.TimeIn0Tz = field.NewInt32(table, "timeIn0Tz")
	s.IsUpload = field.NewInt32(table, "isUpload")
	s.IsDeleted = field.NewInt32(table, "isDeleted")

	s.fillFieldMap()

	return s
}

func (s *standRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *standRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["key"] = s.Key
	s.fieldMap["sid"] = s.Sid
	s.fieldMap["time"] = s.Time
	s.fieldMap["value"] = s.Value
	s.fieldMap["zoneOffsetInSec"] = s.ZoneOffsetInSec
	s.fieldMap["zoneName"] = s.ZoneName
	s.fieldMap["timeIn0Tz"] = s.TimeIn0Tz
	s.fieldMap["isUpload"] = s.IsUpload
	s.fieldMap["isDeleted"] = s.IsDeleted
}

func (s standRecord) clone(db *gorm.DB) standRecord {
	s.standRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s standRecord) replaceDB(db *gorm.DB) standRecord {
	s.standRecordDo.ReplaceDB(db)
	return s
}

type standRecordDo struct{ gen.DO }

type IStandRecordDo interface {
	gen.SubQuery
	Debug() IStandRecordDo
	WithContext(ctx context.Context) IStandRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStandRecordDo
	WriteDB() IStandRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStandRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStandRecordDo
	Not(conds ...gen.Condition) IStandRecordDo
	Or(conds ...gen.Condition) IStandRecordDo
	Select(conds ...field.Expr) IStandRecordDo
	Where(conds ...gen.Condition) IStandRecordDo
	Order(conds ...field.Expr) IStandRecordDo
	Distinct(cols ...field.Expr) IStandRecordDo
	Omit(cols ...field.Expr) IStandRecordDo
	Join(table schema.Tabler, on ...field.Expr) IStandRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStandRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStandRecordDo
	Group(cols ...field.Expr) IStandRecordDo
	Having(conds ...gen.Condition) IStandRecordDo
	Limit(limit int) IStandRecordDo
	Offset(offset int) IStandRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStandRecordDo
	Unscoped() IStandRecordDo
	Create(values ...*model.StandRecord) error
	CreateInBatches(values []*model.StandRecord, batchSize int) error
	Save(values ...*model.StandRecord) error
	First() (*model.StandRecord, error)
	Take() (*model.StandRecord, error)
	Last() (*model.StandRecord, error)
	Find() ([]*model.StandRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandRecord, err error)
	FindInBatches(result *[]*model.StandRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StandRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStandRecordDo
	Assign(attrs ...field.AssignExpr) IStandRecordDo
	Joins(fields ...field.RelationField) IStandRecordDo
	Preload(fields ...field.RelationField) IStandRecordDo
	FirstOrInit() (*model.StandRecord, error)
	FirstOrCreate() (*model.StandRecord, error)
	FindByPage(offset int, limit int) (result []*model.StandRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStandRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s standRecordDo) Debug() IStandRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s standRecordDo) WithContext(ctx context.Context) IStandRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s standRecordDo) ReadDB() IStandRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s standRecordDo) WriteDB() IStandRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s standRecordDo) Session(config *gorm.Session) IStandRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s standRecordDo) Clauses(conds ...clause.Expression) IStandRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s standRecordDo) Returning(value interface{}, columns ...string) IStandRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s standRecordDo) Not(conds ...gen.Condition) IStandRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s standRecordDo) Or(conds ...gen.Condition) IStandRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s standRecordDo) Select(conds ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s standRecordDo) Where(conds ...gen.Condition) IStandRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s standRecordDo) Order(conds ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s standRecordDo) Distinct(cols ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s standRecordDo) Omit(cols ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s standRecordDo) Join(table schema.Tabler, on ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s standRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s standRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s standRecordDo) Group(cols ...field.Expr) IStandRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s standRecordDo) Having(conds ...gen.Condition) IStandRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s standRecordDo) Limit(limit int) IStandRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s standRecordDo) Offset(offset int) IStandRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s standRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStandRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s standRecordDo) Unscoped() IStandRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s standRecordDo) Create(values ...*model.StandRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s standRecordDo) CreateInBatches(values []*model.StandRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s standRecordDo) Save(values ...*model.StandRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s standRecordDo) First() (*model.StandRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandRecord), nil
	}
}

func (s standRecordDo) Take() (*model.StandRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandRecord), nil
	}
}

func (s standRecordDo) Last() (*model.StandRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandRecord), nil
	}
}

func (s standRecordDo) Find() ([]*model.StandRecord, error) {
	result, err := s.DO.Find()
	return result.([]*model.StandRecord), err
}

func (s standRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandRecord, err error) {
	buf := make([]*model.StandRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s standRecordDo) FindInBatches(result *[]*model.StandRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s standRecordDo) Attrs(attrs ...field.AssignExpr) IStandRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s standRecordDo) Assign(attrs ...field.AssignExpr) IStandRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s standRecordDo) Joins(fields ...field.RelationField) IStandRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s standRecordDo) Preload(fields ...field.RelationField) IStandRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s standRecordDo) FirstOrInit() (*model.StandRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandRecord), nil
	}
}

func (s standRecordDo) FirstOrCreate() (*model.StandRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandRecord), nil
	}
}

func (s standRecordDo) FindByPage(offset int, limit int) (result []*model.StandRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s standRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s standRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s standRecordDo) Delete(models ...*model.StandRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *standRecordDo) withDO(do gen.Dao) *standRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
